-- vi: syntax=pgsql
-- Function add_webpages adds URLs to the webpages table, and tracks
-- parent-child relationships from hyperlinks in the webpage_relations table.
-- add_webpages is overloaded because initial requests have no known parent.
-- The in_depth value applies to child URLs only, even when a parent has been
-- specified. It is expected that the parent depth was previously set.

CREATE OR REPLACE FUNCTION add_webpages (
    IN in_child_urls text[],
    IN in_depth integer
) RETURNS SETOF VOID AS $FN$

    DECLARE child_url text;
    DECLARE found_depth integer;

    BEGIN

    FOR child_url IN SELECT unnest(in_child_urls)
    LOOP
        BEGIN
            INSERT INTO webpages (url, depth) VALUES (child_url, in_depth);
            EXCEPTION WHEN unique_violation THEN
                SELECT depth INTO found_depth
                    FROM webpages WHERE url = child_url;
                IF in_depth > found_depth THEN
                    UPDATE webpages
                        SET webpages.depth = in_depth,
                        webpages.completion_datetime = NULL
                        WHERE url = child_url;
                END IF;
        END;
    END LOOP;

    END;

$FN$ LANGUAGE PLPGSQL VOLATILE;

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

CREATE OR REPLACE FUNCTION add_webpages (
    IN in_parent_url text,
    IN in_child_urls text[],
    IN in_depth integer
) RETURNS SETOF VOID AS $FN$

    DECLARE child_url text;
    DECLARE parent_id integer;
    DECLARE child_id integer;

    BEGIN

    BEGIN
        INSERT INTO webpages (url) VALUES (in_parent_url);
        EXCEPTION WHEN unique_violation THEN -- do nothing
    END;

    SELECT id INTO parent_id FROM webpages WHERE webpages.url = in_parent_url;

    FOR child_url IN SELECT unnest(in_child_urls)
    LOOP
        BEGIN
            INSERT INTO webpages (url, depth) VALUES (child_url, in_depth);
            EXCEPTION WHEN unique_violation THEN
                UPDATE webpages SET depth = in_depth
                    WHERE webpages.url = child_url
                    AND webpages.depth < in_depth;
        END;
        SELECT id INTO child_id FROM webpages WHERE webpages.url = child_url;
        PERFORM parent FROM webpage_relations
            WHERE webpage_relations.parent = parent_id
            AND webpage_relations.child = child_id;
        IF NOT FOUND THEN
            INSERT INTO webpage_relations (parent, child)
                VALUES (parent_id, child_id);
        END IF;
    END LOOP;

    END;

$FN$ LANGUAGE PLPGSQL VOLATILE;
